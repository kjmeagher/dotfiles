#!/usr/bin/env python3

import argparse
import datetime
import sys
import zoneinfo

import tabulate
import tzlocal

aliases = {
    "Central Europe": "Europe/Berlin",
    "East Coast": "US/Eastern",
    "Wisconsin": "US/Central",
    "California": "US/Pacific",
    "Chiba/Seoul": "Asia/Tokyo",
    "Adelaide": "Australia/Adelaide",
    "Christchurch": "Pacific/Auckland",
}


def get_arg(tt, c):
    s = tt.split(c)
    if len(s) in (2, 3):
        return [int(x) for x in s]
    raise ValueError


parser = argparse.ArgumentParser(description="Convert localtime to other timezones")
parser.add_argument("time", nargs="*", help="Time to convert (Default: Now)")
parser.add_argument(
    "--format",
    "-f",
    default="%a, %d %b, %Y at %H:%M %p %Z(%z)",
    help="Output format to use for times, same as used by strftime",
)
parser.add_argument(
    "--zones", "-z", nargs="+", help="List of timezones to print out tht time"
)
parser.add_argument(
    "--list", action="store_true", help="Print a list of all timezones and exit"
)

args = parser.parse_args()

if args.list:
    for tz in sorted(zoneinfo.available_timezones()):
        print(tz)
    sys.exit(0)

utcnow = datetime.datetime.utcnow().replace(tzinfo=zoneinfo.ZoneInfo("UTC"))
localzone = tzlocal.get_localzone()

refdate = None
reftime = None
refzone = None

for a in args.time:
    if refdate is None:
        try:
            refdate = get_arg(a, "-")
            continue
        except ValueError as v:
            pass
        try:
            refdate = get_arg(a, "/")
            continue
        except ValueError as v:
            pass
    if reftime is None:
        try:
            reftime = get_arg(a, ":")
            continue
        except ValueError as v:
            pass
    if refzone is None:
        try:
            refzone = zoneinfo.ZoneInfo(a)
            continue
        except zoneinfo.ZoneInfoNotFoundError as v:
            pass
    raise ValueError(f'I don\'t understand argument "{a}"')

if not refzone:
    refzone = localzone
refdt = utcnow.astimezone(refzone)

if refdate:
    if len(refdate) == 2:
        refdate = [refdt.year, refdate[0], refdate[1]]
else:
    refdate = [refdt.year, refdt.month, refdt.day]

if not reftime:
    reftime = [refdt.hour, refdt.minute]

refdt = datetime.datetime(*(refdate + reftime), tzinfo=refzone)

if args.zones is None:
    args.zones = aliases.keys()

zones = []
found_local = False
found_ref = False
localdt = refdt.astimezone(localzone)
localoffset = localdt.utcoffset()
refoffset = refdt.utcoffset()

for z in args.zones:
    name = aliases.get(z, z)
    zone = zoneinfo.ZoneInfo(name)
    time = refdt.astimezone(zone)
    if time.utcoffset() == localoffset:
        found_local = True
    if time.utcoffset() == refoffset:
        found_ref = True
    zones.append((z, time))

if not found_local:
    zones.append((str(localzone), localdt))

if not found_ref and localoffset != refoffset:
    zones.append((str(refzone), refdt))

zones.sort(key=lambda z: -z[1].utcoffset())

zones2 = []
for name, time in zones:
    if time.utcoffset() == refdt.utcoffset():
        name += "*"
    if time.utcoffset() == localdt.utcoffset():
        name += "â€ "
    zones2.append((name, time.strftime(args.format)))

print(tabulate.tabulate(zones2, tablefmt="plain"))
